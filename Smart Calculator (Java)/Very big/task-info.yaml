type: edu
files:
- name: src/calculator/Main.java
  visible: true
  text: "package calculator;\n\nimport java.util.Scanner;\n\npublic class Main {\n\
    \n    public static void main(String[] args) {\n        Scanner scanner = new\
    \ Scanner(System.in);\n        // put your code here\n        \n        int number1\
    \ = scanner.nextInt();\n        int number2 = scanner.nextInt();\n\n        System.out.println(number1\
    \ + number2);\n    }\n}\n"
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // tests of functionality of previous steps
                        main.start();

                        // test of /help
                        String output = main.execute("/help").trim();
                        if (output.length() < 4) {
                            return CheckResult.wrong("It seems like there was no any \"help\" message.");
                        }

                        // input empty string
                        output = main.execute("");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Incorrect response to an empty string. " +
                                    "The program should not print anything.");
                        }

                        // testing basic assignment
                        output = main.execute("n = 32");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // testing a big amount of numbers
                        output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                        if (!output.equals("-3")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }

                        // the same with a variable
                        output = main.execute("33 + 20 + 11 + 49 - n - 9 + 1 - 80 + 4").trim();
                        if (!output.equals("-3")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }


                        output = main.execute("c = n \nc = 2");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // check value
                        output = main.execute("  c  ").trim();
                        if (!output.equals("2")) {
                            return CheckResult.wrong("The variable stores not a correct value." +
                                    "May be the program could not assign the value of one variable to another one.");
                        }

                        // the sum of the numbers is zero
                        output = main.execute("11 - 13 + c").trim();
                        if (!output.equals("0")) {
                            return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                        }

                        // test of multiple operations
                        output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                        if (!output.equals("10")) {
                            return CheckResult.wrong("The program cannot process multiple operations with several operators.");
                        }

                        // test of a nonexistent command
                        output = main.execute("/start").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should print \"Unknown command\" " +
                                    "when a nonexistent command is entered.");
                        }

                        // testing invalid variable name
                        output = main.execute("var1 = 1").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The name of variable should contain only Latin letters.");
                        }

                        // testing invalid value
                        output = main.execute("var = 2a").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The value can be an integer number or a value of another variable");
                        }

                        // testing multiple equalization
                        output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The program could not handle a invalid assignment.");
                        }

                        // testing assignment by unassigned variable
                        output = main.execute("variable = f").trim().toLowerCase();
                        if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                            return CheckResult.wrong("The program should not allow an assignment by unassigned variable.");
                        }

                        // checking case sensitivity
                        main.execute("variable = 777");
                        output = main.execute("Variable").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should be case sensitive.");
                        }

                        // checking case sensitivity
                        main.execute("variable = 777");
                        output = main.execute("Variable").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should be case sensitive.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // A test suit for multiplication and division
                        main.start();

                        String output = main.execute("4 * 3").trim();
                        if (!output.equals("12")) {
                            return CheckResult.wrong("The program has problems with multiplication operation.");
                        }

                        output = main.execute("91 / 13").trim();
                        if (!output.equals("7")) {
                            return CheckResult.wrong("The program has problems with division operation.");
                        }

                        // testing all operators
                        main.execute(" a= 7 \n b =2");
                        output = main.execute("a * 4 / b - (3 - 1)").trim();
                        if (!output.equals("12")) {
                            return CheckResult.wrong("The program cannot correctly process several operations.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // testing priority of parentheses
                        main.start();

                        // expression from the example
                        String output = main.execute("7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();
                        if (!output.equals("155")) {
                            return CheckResult.wrong("The program cannot reproduce an example from the task.");
                        }

    //                    // test case with a big amount of brackets
    //                    output = main.execute("3 + (9 + ( 68 * 3/9)) * ((7-2 * 5) / 2) * 6").trim();
    //                    if (!output.equals("-282")) {
    //                        return CheckResult.wrong("Program incorrectly solves expressions with multi-level parentheses");
    //                    }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // a set of negative tests
                        main.start();

                        // tests with unclosed brackets
                        String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                        String output1 = main.execute("4 + 5)").trim().toLowerCase();
                        if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                            return CheckResult.wrong("The program could not handle an invalid expression.");
                        }

                        // sequence of * test
                        output = main.execute("2 ************ 2").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("A sequence of \"*\" should return \"Invalid expression\".");
                        }

                        // sequence of / test
                        output = main.execute("2 // 2").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("A sequence of \"/\" should return \"Invalid expression\".");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // test suit for the 8th stage with very large numbers
                        main.start();

                        // testing basic assignment
                        String output = main.execute("n = 32000000000000000000");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // testing a big amount of numbers
                        output = main.execute("33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                                "49000000000000000000 - 32000000000000000000 - 9000000000000000000 " +
                                "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                        if (!output.equals("-2999999999999999999")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }

                        // the same with a variable
                        output = main.execute(
                            "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                                "49000000000000000000 - n - 9000000000000000000 " +
                                "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                        if (!output.equals("-2999999999999999999")) {
                            return CheckResult.wrong(
                                "The program cannot process addition " +
                                    "and subtraction operations correctly.");
                        }

                        // testing reassignment with big values
                        output = main.execute("c = n \nc = 2000000000000000000000");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // check value
                        output = main.execute("  c   ").trim();
                        if (!output.equals("2000000000000000000000")) {
                            return CheckResult.wrong("The variable stores not a correct value." +
                                    "May be the program could not assign the value of one variable to another one.");
                        }

                        // the sum of the numbers is zero
                        output = main.execute("11000000000000000000 - 9000000000000000000 - " +
                                "c + 1998000000000000000000").trim();
                        if (!output.equals("0")) {
                            return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                        }

                        // test of multiple operations
                        output = main.execute("5000000000000000000 --- 2000000000000000000 " +
                                "++++++ 4000000000000000000 -- 2000000000000000000 ---- 1000000000000000000").trim();
                        if (!output.equals("10000000000000000000")) {
                            return CheckResult.wrong("The program cannot process multiple operations with several operators.");
                        }

                        // testing all operators, with variables
                        main.execute(" a= 7000000000000000000 \n b =2000000000000000000");
                        output = main.execute("a * 4000000000000000000 / " +
                                "b - (3000000000000000000 - 1000000000000000000)").trim();
                        if (!output.equals("12000000000000000000")) {
                            return CheckResult.wrong("The program cannot correctly process several operations.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    })

            );
        }
    }
  learner_created: false
- name: src/calculator/Command.java
  visible: true
  text: |
    package calculator;

    public class Command {

        String checkCommand(String val) {
            if ("/exit".equals(val)) {
                System.out.println("Bye!");
                return val;
            } else if ("/help".equals(val)) {
                System.out.println("The program calculates the addition, subtraction,"
                        + " integer multiplication, and integer division of numbers");
                return "/help";
            } else {
                System.out.println("Unknown command");
                return "Unknown command";
            }
        }
    }
  learner_created: true
- name: src/calculator/Calculation.java
  visible: true
  text: |
    package calculator;

    import java.util.ArrayDeque;
    import java.util.Deque;
    import java.util.HashMap;
    import java.util.Stack;

    public class Calculation {

        static int prec(char ch)
        {
            switch (ch) {
                case '+':
                case '-':
                    return 1;

                case '*':
                case '/':
                    return 2;

                case '^':
                    return 3;
            }
            return -1;
        }

        static String makeStringCorrect(String val) {
            val = val.replaceAll("\\s+", "");
            val = val.replaceAll("\\++", "+");

            while (val.contains("---")) {
                val = val.replaceAll("---", "-");
            }
            if (val.contains("--")) {
                val = val.replaceAll("--", "+");
            }
            return val;
        }

        private int evaluatePostfix(HashMap<String, Integer> var, String exp)
        {
            // Create a stack
            Stack<Integer> stack = new Stack<>();

            // Scan all characters one by one
            for (int i = 0; i < exp.length(); i++) {
                char c = exp.charAt(i);

                if (c == ' ')
                    continue;

                    // If the scanned character is an operand
                    // (number here),extract the number
                    // Push it to the stack.
                else if (Character.isDigit(c)) {
                    int n = 0;

                    // Extract the characters and store it in num
                    while (Character.isDigit(c)) {
                        n = n * 10 + (int)(c - '0');
                        i++;
                        c = exp.charAt(i);
                    }
                    i--;

                    // Push the number in stack
                    stack.push(n);
                }
                else if (Character.isAlphabetic(c)) {
                    StringBuilder s = new StringBuilder();
                    int n = i;
                    // Extract the characters and store it in String
                    while (Character.isAlphabetic(c)) {
                        s.append(c);
                        i++;
                        c = exp.charAt(i);
                    }
                    i = n;

                    // Push the number in stack
                    stack.push(getNumber(var, String.valueOf(s)));
                }

                // If the scanned character is an operator, pop
                // two elements from stack apply the operator
                else {
                    int val1 = stack.pop();
                    int val2 = 0;
                    if (!stack.isEmpty()) {
                        val2 = stack.pop();
                    }

                    switch (c) {
                        case '+':
                            stack.push(val2 + val1);
                            break;
                        case '-':
                            stack.push(val2 - val1);
                            break;
                        case '/':
                            stack.push(val2 / val1);
                            break;
                        case '*':
                            stack.push(val2 * val1);
                            break;
                        case '^':
                            stack.push((int)Math.pow(val2, val1));
                            break;
                    }
                }
            }
            return stack.pop();
        }
        private Integer getNumber(HashMap<String, Integer> var, String str) {
            if (str.matches("[a-zA-Z]+")) {
                if (var.containsKey(str)){
                    return var.get(str);
                } else {
                    System.out.println("Unknown variable");
                    return null;
                }
            } else if (str.matches("\\d+")) {
                return Integer.parseInt(str);
            } else {
                System.out.println("Invalid identifier");
                return null;
            }
        }

        private String infixToPostfix(String exp) {
            // Initializing empty String for result
            String result = new String("");

            // Initializing empty stack
            Deque<Character> stack
                    = new ArrayDeque<>();

            for (int i = 0; i < exp.length(); ++i) {
                char c = exp.charAt(i);

                // If the scanned character is an
                // operand, add it to output.
                if (Character.isLetterOrDigit(c)){
                    result += c;
                    if (i < exp.length() - 1) {
                        if (!Character.isLetterOrDigit(exp.charAt(i + 1))) {
                            result += " ";
                        }
                    }
                }


                    // If the scanned character is an '(',
                    // push it to the stack.
                else if (c == '(')
                    stack.push(c);

                    // If the scanned character is an ')',
                    // pop and output from the stack
                    // until an '(' is encountered.
                else if (c == ')') {
                    while (!stack.isEmpty()
                            && stack.peek() != '(') {
                        result += stack.peek() + " ";
                        stack.pop();
                    }
                    if (!stack.isEmpty()) {
                        stack.pop();
                    } else {
                        return "Invalid expression";
                    }
                }

                // An operator is encountered
                else
                {
                    while (!stack.isEmpty()
                            && prec(c) <= prec(stack.peek())) {

                        result += stack.peek() + " ";
                        stack.pop();
                    }
                    stack.push(c);
                }
            }

            // Pop all the operators from the stack
            while (!stack.isEmpty()) {
                if (stack.peek() == '(') {
                    System.out.println("Invalid expression");
                    return "Invalid expression";
                }
                result += stack.peek() + " ";
                stack.pop();
            }

            return result;
        }

        void calculate(HashMap<String, Integer> var, String val) {
            if (val.matches("\\d+")) {
                System.out.println(val);
            } else if (val.matches("[a-zA-Z]+")) {
                System.out.println(getNumber(var, val));
            }else {
                val = makeStringCorrect(val);
                if (val.length() == 0 || val.contains("**") || val.contains("//")) {
                    System.out.println("Invalid expression");
                } else {
                    String res = infixToPostfix(val);
                    //System.out.println(res);
                    if (!"Invalid expression".equals(res)){
                        System.out.println(evaluatePostfix(var, res));
                    }
                }
            }
        }
    }
  learner_created: true
- name: src/calculator/Assignment.java
  visible: true
  text: |
    package calculator;

    import java.util.HashMap;

    public class Assignment {

        HashMap<String, Integer> assign(HashMap<String, Integer> var, String val) {
            String[] arr = val.split("=");
            if (arr.length < 3) {
                if (arr[0].trim().matches("[a-zA-Z]+")) {
                    if (arr[1].trim().matches("\\d+")) {
                        var.put(arr[0].trim(), Integer.parseInt(arr[1].trim()));
                    } else if (arr[1].trim().matches("[a-zA-Z]+")) {
                        if (var.containsKey(arr[1].trim())){
                            var.put(arr[0].trim(), var.get(arr[1].trim()));
                        } else {
                            System.out.println("Unknown variable");
                        }
                    } else {
                        System.out.println("Invalid assignment");
                    }
                } else {
                    System.out.println("Invalid identifier");
                }
            } else {
                System.out.println("Invalid assignment");
            }
            return var;
        }
    }
  learner_created: true
- name: test/calculator/CalculationTest.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5323#comment
status: Unchecked
record: -1
